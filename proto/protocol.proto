syntax = "proto2";
package msgs;

import "keys.proto";

message KeystrokeRequest {
  // The `request id` is decided by the client, and can be any value.
  // The server's only concern is to use the same id in the corresponding
  // response
  required uint32 req_id = 7;
  required uint64 app_id = 1;
  required bool ctrl  = 2;
  required bool alt   = 3;
  required bool shift = 4;
  required bool meta  = 5;
  required Keycode key = 6;
}

message Response {
	enum Status {
		Success = 1;		// input delivered successfully
		WindowLostFocus = 2;	// window lost focus between request and service time
	}
	
	required uint32 req_id = 1;
	required Status status = 2;
}

message AppList {
  repeated Application apps = 1;
}

message Application {
    required uint64 id = 1;
    optional string name = 2; //process name
	optional string win_title = 3; //window title
    optional Icon icon = 4;
}

message Icon {
	// Size in pixels
	required uint32 width = 1;
	required uint32 height = 2;
	// Raw image data, in packed ARGB32 format
	// < a: u8, r: u8, g: u8, b: u8 >
	// `pixels` should be (width * height * 4) bytes
	required bytes pixels = 3;
}

message AppDestroyed {
    required uint64 id = 1;
}

message AppGotFocus {
    required uint64 id = 1;
}

// in a case like this, one would normally use a `tagged union', also known as
// a `Type-Length-Value' encoding in network protocol jargon, but it turns out
// that a message composed of all `optional' fields is encoded by Protobuf in
// much the same way (and just as efficiently) as a sequence of TLV messages.
// See: https://developers.google.com/protocol-buffers/docs/encoding#optional
message Event {
    optional AppDestroyed destroyed = 1;
    optional Application  created = 2;
    optional AppGotFocus  got_focus = 3;
    optional Response     response = 4;
}
