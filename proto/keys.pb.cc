// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msgs {

namespace {

const ::google::protobuf::EnumDescriptor* Keycode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_keys_2eproto() {
  protobuf_AddDesc_keys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "keys.proto");
  GOOGLE_CHECK(file != NULL);
  Keycode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_keys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_keys_2eproto() {
}

void protobuf_AddDesc_keys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkeys.proto\022\004msgs*\331\014\n\007Keycode\022\016\n\nKeyUnk"
    "nown\020\000\022\020\n\014KeyBackspace\020\001\022\n\n\006KeyTab\020\002\022\r\n\t"
    "KeyReturn\020\003\022\r\n\tKeyLShift\020\004\022\016\n\nKeyControl"
    "\020\005\022\n\n\006KeyAlt\020\006\022\013\n\007KeyMeta\020\007\022\010\n\004KeyA\020\010\022\010\n"
    "\004KeyB\020\t\022\010\n\004KeyC\020\n\022\010\n\004KeyD\020\013\022\010\n\004KeyE\020\014\022\010\n"
    "\004KeyF\020\r\022\010\n\004KeyG\020\016\022\010\n\004KeyH\020\017\022\010\n\004KeyI\020\020\022\010\n"
    "\004KeyJ\020\021\022\010\n\004KeyK\020\022\022\010\n\004KeyL\020\023\022\010\n\004KeyM\020\024\022\010\n"
    "\004KeyN\020\025\022\010\n\004KeyO\020\026\022\010\n\004KeyP\020\027\022\010\n\004KeyQ\020\030\022\010\n"
    "\004KeyR\020\031\022\010\n\004KeyS\020\032\022\010\n\004KeyT\020\033\022\010\n\004KeyU\020\034\022\010\n"
    "\004KeyV\020\035\022\010\n\004KeyW\020\036\022\010\n\004KeyX\020\037\022\010\n\004KeyY\020 \022\010\n"
    "\004KeyZ\020!\022\010\n\004Key0\020\"\022\010\n\004Key1\020#\022\010\n\004Key2\020$\022\010\n"
    "\004Key3\020%\022\010\n\004Key4\020&\022\010\n\004Key5\020\'\022\010\n\004Key6\020(\022\010\n"
    "\004Key7\020)\022\010\n\004Key8\020*\022\010\n\004Key9\020+\022\014\n\010KeyPause\020"
    ",\022\017\n\013KeyCapsLock\020-\022\r\n\tKeyEscape\020.\022\014\n\010Key"
    "Space\020/\022\r\n\tKeyPageUp\0200\022\017\n\013KeyPageDown\0201\022"
    "\n\n\006KeyEnd\0202\022\013\n\007KeyHome\0203\022\013\n\007KeyLeft\0204\022\t\n"
    "\005KeyUp\0205\022\014\n\010KeyRight\0206\022\013\n\007KeyDown\0207\022\r\n\tK"
    "eySelect\0208\022\014\n\010KeyPrint\0209\022\016\n\nKeyExecute\020:"
    "\022\r\n\tKeyInsert\020;\022\r\n\tKeyDelete\020<\022\013\n\007KeyHel"
    "p\020=\022\014\n\010KeySleep\020>\022\016\n\nKeyKeypad0\020\?\022\016\n\nKey"
    "Keypad1\020@\022\016\n\nKeyKeypad2\020A\022\016\n\nKeyKeypad3\020"
    "B\022\016\n\nKeyKeypad4\020C\022\016\n\nKeyKeypad5\020D\022\016\n\nKey"
    "Keypad6\020E\022\016\n\nKeyKeypad7\020F\022\016\n\nKeyKeypad8\020"
    "G\022\016\n\nKeyKeypad9\020H\022\025\n\021KeyKeypadAsterisk\020I"
    "\022\021\n\rKeyKeypadPlus\020J\022\022\n\016KeyKeypadComma\020K\022"
    "\022\n\016KeyKeypadMinus\020L\022\023\n\017KeyKeypadPeriod\020M"
    "\022\022\n\016KeyKeypadSlash\020N\022\t\n\005KeyF1\020O\022\t\n\005KeyF2"
    "\020P\022\t\n\005KeyF3\020Q\022\t\n\005KeyF4\020R\022\t\n\005KeyF5\020S\022\t\n\005K"
    "eyF6\020T\022\t\n\005KeyF7\020U\022\t\n\005KeyF8\020V\022\t\n\005KeyF9\020W\022"
    "\n\n\006KeyF10\020X\022\n\n\006KeyF11\020Y\022\n\n\006KeyF12\020Z\022\n\n\006K"
    "eyF13\020[\022\n\n\006KeyF14\020\\\022\n\n\006KeyF15\020]\022\n\n\006KeyF1"
    "6\020^\022\n\n\006KeyF17\020_\022\n\n\006KeyF18\020`\022\n\n\006KeyF19\020a\022"
    "\n\n\006KeyF20\020b\022\n\n\006KeyF21\020c\022\n\n\006KeyF22\020d\022\n\n\006K"
    "eyF23\020e\022\n\n\006KeyF24\020f\022\016\n\nKeyNumLock\020g\022\021\n\rK"
    "eyScrollLock\020h\022\013\n\007KeyBack\020i\022\016\n\nKeyForwar"
    "d\020j\022\016\n\nKeyRefresh\020k\022\013\n\007KeyStop\020l\022\r\n\tKeyS"
    "earch\020m\022\020\n\014KeyFavorites\020n\022\017\n\013KeyHomePage"
    "\020o\022\021\n\rKeyVolumeMute\020p\022\021\n\rKeyVolumeDown\020q"
    "\022\017\n\013KeyVolumeUp\020r\022\020\n\014KeyMediaNext\020s\022\020\n\014K"
    "eyMediaPrev\020t\022\020\n\014KeyMediaStop\020u\022\033\n\027KeyMe"
    "diaTogglePlayPause\020v\022\013\n\007KeyPlay\020w\022\013\n\007Key"
    "Zoom\020x", 1646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "keys.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keys_2eproto {
  StaticDescriptorInitializer_keys_2eproto() {
    protobuf_AddDesc_keys_2eproto();
  }
} static_descriptor_initializer_keys_2eproto_;
const ::google::protobuf::EnumDescriptor* Keycode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keycode_descriptor_;
}
bool Keycode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs

// @@protoc_insertion_point(global_scope)
